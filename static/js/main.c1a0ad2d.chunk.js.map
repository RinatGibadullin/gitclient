{"version":3,"sources":["Components/Repository/Mutations/Star.js","Components/Repository/Mutations/UnStar.js","Components/Repository/CommitsList.js","Components/Repository/Repository.js","Components/Login.js","Components/RepositoryList/RepositoryList.js","Components/User/Mutations/FollowUser.js","Components/User/Mutations/UnFollowUser.js","Components/User/User.js","Components/User/Profile.js","Components/RepositoryList/SearchRepositoriesList.js","Components/RepositoryList/SearchRepositories.js","Components/User/SearchUsersList.js","Components/User/SearchUsers.js","Components/AppRouter.js","Components/NavBar.js","Components/App.js","registerServiceWorker.js","index.js"],"names":["STAR_REPOSITORY","gql","Star","makeStyles","theme","root","margin","id","node","mutation","variables","starRepository","onClick","className","style","cursor","UNSTAR_REPOSITORY","UnStar","unStarRepository","CommitsList","commits","edges","map","console","log","key","Card","CardContent","display","Typography","variant","gutterBottom","createdAt","bodyText","useStyles","padding","spacing","textAlign","row","flexDirection","justifyContent","item","GET_REPOSITORY","Repository","useParams","login","name","classes","query","repo","repositoryOwner","data","loading","position","top","left","type","color","height","width","timeout","Paper","ButtonGroup","size","aria-label","Button","repository","forks","totalCount","pullRequests","watchers","commitComments","component","to","owner","viewerHasStarred","stargazers","description","paper","marginTop","alignItems","avatar","backgroundColor","palette","secondary","main","form","submit","centerRow","IsTokenValid","localStorage","getItem","length","Login","React","useState","value","setValue","Container","maxWidth","Avatar","noValidate","onSubmit","setItem","Switch","TextField","required","fullWidth","label","autoFocus","onChange","event","target","RepositoryList","repositories","card","textDecoration","CardActions","FOLLOW_USER","FollowUser","followUser","UnFollowUser","GET_USER","userInfo","boxShadow","User","src","avatarUrl","bio","company","location","websiteUrl","viewerIsFollowing","GET_CURRENT_USER","Profile","viewer","SearchRepositoriesList","search","SEARCH_REPOSITORY","container","textField","marginLeft","marginRight","SearchRepositories","input","setInput","error","SearchUsersList","flexWrap","border","SEARCH_USER","SearchUsers","user","AppRouter","organization","path","flexGrow","NavBar","AppBar","background","Toolbar","href","clear","transition","media","heading","fontWeight","subheading","lineHeight","App","createMuiTheme","typography","fontFamily","join","htmlFontSize","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","cache","InMemoryCache","httpLink","HttpLink","uri","headers","authorization","client","ApolloClient","link","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c1a0ad2d.chunk.js","sourcesContent":["import {Mutation} from \"react-apollo\";\r\nimport React from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport gql from \"graphql-tag\";\r\n\r\nconst STAR_REPOSITORY = gql`\r\n  mutation($id: ID!) {\r\n    addStar(input: { starrableId: $id }) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n        stargazers {\r\n            totalCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    root: {\r\n            margin: \"5px\",\r\n    },\r\n}));\r\n\r\nconst Star = ({node}) => {\r\n    const {id} = node;\r\n    return <Mutation mutation={STAR_REPOSITORY} variables={{id}}>\r\n        {starRepository => (\r\n            <i onClick={starRepository} className=\"far fa-star fa-2x\" style={{cursor: 'pointer'}}/>\r\n        )}\r\n    </Mutation>\r\n};\r\nexport default Star;","import {Mutation} from \"react-apollo\";\r\nimport React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport {useStyles} from \"./Star\";\r\n\r\nconst UNSTAR_REPOSITORY = gql`\r\n  mutation($id: ID!) {\r\n    removeStar(input: { starrableId: $id }) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n        stargazers {\r\n            totalCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst UnStar = ({node}) => {\r\n    const {id} = node;\r\n    return <Mutation mutation={UNSTAR_REPOSITORY} variables={{id}}>\r\n        {unStarRepository => (\r\n            <i onClick={unStarRepository} className=\"fas fa-star fa-2x\" style={{cursor: 'pointer'}}/>\r\n        )}\r\n    </Mutation>\r\n};\r\nexport default UnStar;","import React from \"react\";\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst CommitsList = ({commits}) => (\r\n        <ul>\r\n            {commits.edges.map(({node}) => {\r\n                console.log(commits)\r\n                return (\r\n                    <li key={node.id}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <div style={{display: \"flex\"}}>\r\n                                    <Typography variant=\"overline\" gutterBottom>\r\n                                        {node.createdAt}\r\n                                    </Typography>\r\n                                </div>\r\n                                <Typography variant=\"subtitle2\">\r\n                                    {node.bodyText}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    )\r\n;\r\n\r\nexport default CommitsList;","import React from 'react'\r\nimport '../App.css';\r\nimport {\r\n    Link,\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport gql from \"graphql-tag\";\r\nimport {Query} from \"react-apollo\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport UnStar from \"./Mutations/UnStar\";\r\nimport Star from \"./Mutations/Star\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport CommitsList from \"./CommitsList\";\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3, 2),\r\n        textAlign: \"center\",\r\n        margin: \"10px\",\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        margin: \"10px\",\r\n    },\r\n    item: {\r\n        margin: \"10px\",\r\n    }\r\n}));\r\n\r\n\r\nconst GET_REPOSITORY = gql`\r\nquery ($login: String!, $repo: String!){\r\n  repositoryOwner (login: $login) {\r\n    repositories {\r\n      totalCount\r\n    }\r\n    repository(name: $repo) {\r\n      id\r\n      name\r\n      createdAt \r\n      description \r\n      isArchived\r\n      isPrivate\r\n      url\r\n      owner {\r\n         login\r\n         id\r\n         url\r\n      }\r\n      viewerHasStarred\r\n      forks {\r\n        totalCount\r\n      }\r\n      issues {\r\n        totalCount\r\n      }\r\n      stargazers {\r\n        totalCount\r\n      }\r\n      watchers {\r\n        totalCount\r\n      }\r\n      pullRequests {\r\n        totalCount\r\n      }\r\n      commitComments(first: 50) {\r\n          totalCount\r\n          edges{\r\n            node{\r\n                bodyText\r\n                createdAt\r\n            }\r\n          }\r\n      }\r\n      labels(first:10) {\r\n        edges {\r\n          node {\r\n            name\r\n          }\r\n        }\r\n      }\r\n      milestones(first:10) {\r\n        edges {\r\n          node {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst Repository = () => {\r\n    let {login, name} = useParams();\r\n    // console.log({name});\r\n    const classes = useStyles();\r\n    return <Query query={GET_REPOSITORY} variables={{login: login, repo: name}}>\r\n        {({data: {repositoryOwner}, loading}) => {\r\n            if (loading || !repositoryOwner) {\r\n                return <div style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                    <Loader\r\n                        type=\"MutatingDots\"\r\n                        color=\"#00BFFF\"\r\n                        height={100}\r\n                        width={100}\r\n                        timeout={3000} //3 secs\r\n\r\n                    />\r\n                </div>\r\n            }\r\n            return (\r\n                <div>\r\n                    <Paper className={classes.root}>\r\n                        <ButtonGroup\r\n                            color=\"secondary\"\r\n                            size=\"large\"\r\n                            aria-label=\"large outlined secondary button group\"\r\n                            className={classes.item}\r\n                        >\r\n                            <Button>{repositoryOwner.repository.forks.totalCount} forks</Button>\r\n                            <Button>{repositoryOwner.repository.pullRequests.totalCount} pull requests</Button>\r\n                            <Button>{repositoryOwner.repository.watchers.totalCount} watchers</Button>\r\n                            <Button>{repositoryOwner.repository.commitComments.totalCount} commits</Button>\r\n\r\n                        </ButtonGroup>\r\n                        <div className={classes.item}>\r\n                            <Typography component=\"p\">\r\n                                <Link to={`/user/${repositoryOwner.repository.owner.id}`}>\r\n                                    {repositoryOwner.repository.owner.login}\r\n                                </Link>\r\n                                /\r\n                                {repositoryOwner.repository.name}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.row}>\r\n                            <Typography variant=\"h1\" component=\"h2\" className={classes.item}>\r\n                                {repositoryOwner.repository.name}\r\n                            </Typography>\r\n                            {repositoryOwner.repository.viewerHasStarred ? (\r\n                                <div className={classes.item}>\r\n                                    <UnStar node={repositoryOwner.repository}/>\r\n                                </div>\r\n                            ) : (\r\n                                <div className={classes.item}>\r\n                                    <Star node={repositoryOwner.repository}/>\r\n                                </div>\r\n                            )}\r\n                            <Typography variant=\"h5\" component=\"h5\" className={classes.item}>\r\n                                Stars: {repositoryOwner.repository.stargazers.totalCount}\r\n                            </Typography>\r\n                            <Typography variant=\"h5\" component=\"h5\" className={classes.item}>\r\n                                Watchers: {repositoryOwner.repository.watchers.totalCount}\r\n                            </Typography>\r\n                        </div>\r\n                        <Typography className={classes.item} component=\"p\">\r\n                            {repositoryOwner.repository.description}\r\n                        </Typography>\r\n                    </Paper>\r\n                    <Typography variant=\"h5\" component=\"h3\">\r\n                        Commits\r\n                    </Typography>\r\n                    <hr/>\r\n                    <CommitsList commits={repositoryOwner.repository.commitComments}/>\r\n                </div>\r\n            );\r\n        }}\r\n    </Query>\r\n};\r\n\r\nexport default Repository","import React from 'react';\r\nimport './App.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Switch} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    centerRow: {\r\n        padding: theme.spacing(3, 2),\r\n        textAlign: \"center\",\r\n        margin: \"10px\",\r\n    }\r\n}));\r\n\r\n\r\nexport const IsTokenValid = () => localStorage.getItem(\"token\") && ((localStorage.getItem(\"token\").length) === 40);\r\n\r\n// function validateToken() {\r\n//     return (\r\n//         <Query query={GET_CURRENT_USER}>\r\n//             {({data}) => {\r\n//                 console.log(data);\r\n//                 if (typeof data == \"undefined\") {\r\n//                     localStorage.clear();\r\n//                 }\r\n//             }}\r\n//         </Query>)\r\n// }\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(\"\");\r\n\r\n    const handleSubmit = () => {\r\n        localStorage.setItem(\"token\", value);\r\n        console.log(\"set token\");\r\n        return <Switch to=\"/profile\"/>\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {IsTokenValid() ? (\r\n                <Paper className={classes.centerRow}>\r\n                    <Typography variant=\"h3\" component=\"h3\" style={{color: \"green\"}}>\r\n                        You signed in successfully. Go to profile page to see your profile.\r\n                    </Typography>\r\n                </Paper>\r\n                ) :\r\n                (<Container component=\"main\" maxWidth=\"xs\">\r\n                    <div className={classes.paper}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockOutlinedIcon/>\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Sign in\r\n                        </Typography>\r\n                        <form className={classes.form}\r\n                              noValidate\r\n                              onSubmit={handleSubmit}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"token\"\r\n                                label=\"Your GitHub access token\"\r\n                                name=\"token\"\r\n                                autoFocus\r\n                                onChange={event => {\r\n                                    setValue(event.target.value);\r\n                                }}\r\n                            />\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                            >\r\n                                Sign In\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Container>)\r\n            }\r\n        </div>)\r\n};\r\nexport default Login;","import React from \"react\";\r\nimport {useStyles} from \"../App\";\r\nimport Star from '../Repository/Mutations/Star'\r\nimport UnStar from '../Repository/Mutations/UnStar'\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport {Link} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst RepositoryList = ({repositories}) => (\r\n        <ul>\r\n            {repositories.edges.map(({node}) => {\r\n                console.log(repositories)\r\n                return (\r\n                    <li key={node.id}>\r\n                        <Card className={useStyles.card}>\r\n                            <CardContent>\r\n                                <h2>\r\n                                    <i className=\"far fa-folder\"></i>\r\n                                    <Link to={`/repository/${node.owner.login}/${node.name}`}\r\n                                          style={{textDecoration: 'none'}}>\r\n                                        {node.name}\r\n                                    </Link>\r\n                                </h2>\r\n\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                {node.viewerHasStarred ? (\r\n                                    <div>\r\n                                        <UnStar node={node}/>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div>\r\n                                        <Star node={node}/>\r\n                                    </div>\r\n                                )}\r\n                                <Typography variant=\"h5\" component=\"h5\">\r\n                                        {node.stargazers.totalCount}\r\n                                </Typography>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    )\r\n;\r\n\r\nexport default RepositoryList;","import {Mutation} from \"react-apollo\";\r\nimport React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FOLLOW_USER = gql`\r\nmutation($id: ID!) {\r\n    followUser(input: { userId: $id }) {\r\n        user{\r\n            id\r\n            name\r\n            login\r\n            avatarUrl\r\n            url\r\n            bio\r\n            viewerIsFollowing\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst FollowUser = ({node}) => {\r\n    const {id} = node;\r\n    return <Mutation mutation={FOLLOW_USER} variables={{id}}>\r\n        {followUser => (\r\n            <Button variant=\"contained\" color=\"primary\" onClick={followUser}>\r\n                FOLLOW\r\n            </Button>\r\n        )}\r\n    </Mutation>\r\n};\r\nexport default FollowUser;","import {Mutation} from \"react-apollo\";\r\nimport React from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FOLLOW_USER = gql`\r\nmutation($id: ID!) {\r\n    unfollowUser(input: { userId: $id }) {\r\n        user{\r\n            id\r\n            name\r\n            login\r\n            avatarUrl\r\n            url\r\n            bio\r\n            viewerIsFollowing\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nconst UnFollowUser = ({node}) => {\r\n    const {id} = node;\r\n    return <Mutation mutation={FOLLOW_USER} variables={{id}}>\r\n        {followUser => (\r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={followUser}>\r\n                UNFOLLOW\r\n            </Button>\r\n        )}\r\n    </Mutation>\r\n};\r\nexport default UnFollowUser;","import React from 'react'\r\nimport '../App.css';\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Query} from \"react-apollo\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport gql from \"graphql-tag\";\r\nimport RepositoryList from \"../RepositoryList/RepositoryList\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport FollowUser from \"./Mutations/FollowUser\";\r\nimport UnFollowUser from \"./Mutations/UnFollowUser\";\r\n\r\n\r\nconst GET_USER = gql`\r\nquery($id: ID!){\r\n    node(id: $id) {\r\n        ... on User {\r\n            id\r\n            name\r\n            login\r\n            avatarUrl\r\n            url\r\n            bio\r\n            company\r\n            isViewer\r\n            location\r\n            websiteUrl\r\n            viewerIsFollowing\r\n            repositories(first: 10\r\n                        orderBy: { direction: DESC, field: STARGAZERS }) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        name\r\n                        url\r\n                        descriptionHTML\r\n                        owner {\r\n                          login\r\n                          url\r\n                        }\r\n                        stargazers {\r\n                          totalCount\r\n                        }\r\n                        viewerHasStarred\r\n                        watchers {\r\n                          totalCount\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3, 2),\r\n        display: \"flex\",\r\n        flexDirection: \"row\"\r\n    },\r\n    userInfo: {\r\n        padding: theme.spacing(3, 2),\r\n        margin: \"20px\",\r\n        width: \"300px\",\r\n        height: \"50%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        boxShadow: \"0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)\"\r\n    },\r\n    repositories: {\r\n        width: \"50%\",\r\n        padding: theme.spacing(3, 2),\r\n    },\r\n    item: {\r\n        padding: theme.spacing(2, 2),\r\n    },\r\n    centerRow: {\r\n        padding: theme.spacing(3, 2),\r\n        textAlign: \"center\",\r\n        margin: \"10px\",\r\n    }\r\n}));\r\n\r\nconst User = () => {\r\n    let {id} = useParams();\r\n    console.log({id})\r\n    const classes = useStyles();\r\n    return <Query query={GET_USER} variables={{id: id}}>\r\n        {({data: {node}, loading}) => {\r\n            if (loading || !node) {\r\n                return <div style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                    <Loader\r\n                        type=\"MutatingDots\"\r\n                        color=\"#00BFFF\"\r\n                        height={100}\r\n                        width={100}\r\n                        timeout={3000} //3 secs\r\n\r\n                    />\r\n                </div>\r\n            }\r\n            return (\r\n                <div className={classes.root}>\r\n                    <Paper className={classes.userInfo}>\r\n                        <Avatar variant=\"square\"\r\n                                src={node.avatarUrl}\r\n                                style={{width: '300px', height: '300px'}}\r\n                        />\r\n                        <div className={classes.item}>\r\n                            <Typography variant=\"h3\" component=\"h3\">\r\n                                {node.name}\r\n                            </Typography>\r\n                            <Typography variant=\"h5\" component=\"h5\">\r\n                                Login: {node.login}\r\n                            </Typography>\r\n                            <Typography component=\"p\">\r\n                                {node.bio}\r\n                            </Typography>\r\n                            <hr/>\r\n                            <Typography variant=\"subtitle2\">\r\n                                <i className=\"fas fa-building fa-2x\" />\r\n                                COMPANY: {node.company}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\">\r\n                                <i className=\"fas fa-map-marker-alt fa-2x\"/>\r\n                                LOCATION: {node.location}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\">\r\n                                <i className=\"fab fa-superpowers fa-2x\"></i>\r\n                                WEBSITE: {node.websiteUrl}\r\n                            </Typography>\r\n                        </div>\r\n                        {node.viewerIsFollowing ? (\r\n                            <UnFollowUser node={node}/>\r\n                        ) : (\r\n                            <FollowUser node={node}/>\r\n                        )}\r\n                    </Paper>\r\n                    <div className={classes.repositories}>\r\n                        <Typography variant=\"h5\" component=\"h3\">\r\n                            Repositories\r\n                        </Typography>\r\n                        <hr/>\r\n                        <div>\r\n                            <RepositoryList repositories={node.repositories}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }}\r\n    </Query>\r\n};\r\n\r\nexport default User","import React from 'react'\r\nimport '../App.css';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport RepositoryList from \"../RepositoryList/RepositoryList\";\r\nimport {useStyles} from \"./User\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {IsTokenValid} from \"../Login\";\r\n\r\nexport const GET_CURRENT_USER = gql`\r\nquery {\r\n    viewer {\r\n        name\r\n        login\r\n        avatarUrl\r\n        url\r\n        bio\r\n        company\r\n        location\r\n        websiteUrl\r\n        repositories(\r\n            first: 5\r\n            orderBy: { direction: DESC, field: STARGAZERS }\r\n        ) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    name\r\n                    url\r\n                    descriptionHTML\r\n                    owner {\r\n                      login\r\n                      url\r\n                    }\r\n                    stargazers {\r\n                      totalCount\r\n                    }\r\n                    viewerHasStarred\r\n                    watchers {\r\n                      totalCount\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\n\r\nconst Profile = () => {\r\n    const classes = useStyles();\r\n    return (<div>\r\n        {IsTokenValid() ? (\r\n                <Query query={GET_CURRENT_USER}>\r\n                    {({data, loading}) => {\r\n                        if (!data) return (\r\n                            <Paper className={classes.centerRow}>\r\n                                <Typography variant=\"h3\" component=\"h3\" style={{color: \"red\"}}>\r\n                                    Your token is not valid. Check please.\r\n                                </Typography>\r\n                            </Paper>\r\n                        );\r\n\r\n                        const {viewer} = data;\r\n                        if (loading || !viewer) {\r\n                            return <div style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                                <Loader\r\n                                    type=\"MutatingDots\"\r\n                                    color=\"#00BFFF\"\r\n                                    height={100}\r\n                                    width={100}\r\n                                    timeout={3000} //3 secs\r\n\r\n                                />\r\n                            </div>\r\n                        }\r\n                        return (\r\n                            <div className={classes.root}>\r\n                                <Paper className={classes.userInfo}>\r\n                                    <Avatar variant=\"square\"\r\n                                            src={viewer.avatarUrl}\r\n                                            style={{width: '300px', height: '300px'}}\r\n                                    />\r\n                                    <div className={classes.item}>\r\n                                        <Typography variant=\"h3\" component=\"h3\">\r\n                                            {viewer.name}\r\n                                        </Typography>\r\n                                        <Typography variant=\"h5\" component=\"h5\">\r\n                                            Login: {viewer.login}\r\n                                        </Typography>\r\n                                        <Typography component=\"p\">\r\n                                            {viewer.bio}\r\n                                        </Typography>\r\n                                        <hr/>\r\n                                        <Typography variant=\"subtitle2\">\r\n                                            <i className=\"fas fa-building fa-2x\"/>\r\n                                            COMPANY: {viewer.company}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle2\">\r\n                                            <i className=\"fas fa-map-marker-alt fa-2x\"/>\r\n                                            LOCATION: {viewer.location}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle2\">\r\n                                            <i className=\"fab fa-superpowers fa-2x\"></i>\r\n                                            WEBSITE: {viewer.websiteUrl}\r\n                                        </Typography>\r\n                                    </div>\r\n                                </Paper>\r\n                                <div className={classes.repositories}>\r\n                                    <Typography variant=\"h5\" component=\"h3\">\r\n                                        Repositories\r\n                                    </Typography>\r\n                                    <hr/>\r\n                                    <div>\r\n                                        <RepositoryList\r\n                                            repositories={viewer.repositories}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Query>) :\r\n            (\r\n                <Paper className={classes.centerRow} style={{backgroundColor: \"#FF9E71\"}}>\r\n                    <Typography variant=\"h3\" component=\"h3\" >\r\n                        To see this page you need to sign in!\r\n                    </Typography>\r\n                </Paper>\r\n            )}\r\n    </div>);\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {useStyles} from \"../App\";\r\nimport Star from '../Repository/Mutations/Star'\r\nimport UnStar from '../Repository/Mutations/UnStar'\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport {Link} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst SearchRepositoriesList = ({data}) =>\r\n        data.search.edges.map(({node}) => {\r\n            if (node.id == null) return (\r\n                <p>No matches</p>\r\n            );\r\n            return (\r\n                    <li key={node.id}>\r\n                        <Card className={useStyles.card}>\r\n                                <CardContent>\r\n                                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                        <Link to={`/repository/${node.owner.login}/${node.name}`}>{node.name}</Link>\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            <CardActions>\r\n                                    {node.viewerHasStarred ? (\r\n                                        <UnStar node={node}/>\r\n                                    ) : (\r\n                                        <Star node={node}/>\r\n                                    )}\r\n                                <div>\r\n                                    <h3>\r\n                                        {node.stargazers.totalCount}\r\n                                    </h3>\r\n                                </div>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </li>\r\n            );\r\n        })\r\n;\r\n\r\nexport default SearchRepositoriesList;","import React, {useState} from \"react\";\r\nimport '../App.css';\r\nimport {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport SearchRepositoriesList from \"./SearchRepositoriesList\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst SEARCH_REPOSITORY = gql`\r\nquery($name: String!){\r\n    search(query: $name, type: REPOSITORY, first: 30) {\r\n      edges {\r\n        node {\r\n          ... on Repository {\r\n            id\r\n            name\r\n            createdAt \r\n            description \r\n            isArchived\r\n            isPrivate\r\n            url\r\n            owner{\r\n                login\r\n                id\r\n                url\r\n            }\r\n            viewerHasStarred\r\n            stargazers {\r\n                totalCount\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: \"center\"\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n    centerRow: {\r\n        padding: theme.spacing(3, 2),\r\n        textAlign: \"center\",\r\n        margin: \"10px\",\r\n    }\r\n}));\r\n\r\n\r\nconst SearchRepositories = () => {\r\n    const classes = useStyles();\r\n    const [input, setInput] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <TextField\r\n                    id=\"outlined-search\"\r\n                    name=\"name\"\r\n                    label=\"Search repositories\"\r\n                    type=\"search\"\r\n                    className={classes.textField}\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={input}\r\n                    onChange={event => {\r\n                        setInput(event.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n            <Query query={SEARCH_REPOSITORY} variables={{name: input}}>\r\n                {({loading, error, data}) => {\r\n                    if (loading) return (\r\n                        <div style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                            <Loader\r\n                                type=\"MutatingDots\"\r\n                                color=\"#00BFFF\"\r\n                                height={100}\r\n                                width={100}\r\n                                timeout={3000}\r\n                            />\r\n                        </div>\r\n                    );\r\n                    if (!data) return (\r\n                        <Paper className={classes.centerRow}>\r\n                            <Typography variant=\"h3\" component=\"h3\" style={{color: \"red\"}}>\r\n                                Your token is not valid. Check please.\r\n                            </Typography>\r\n                        </Paper>\r\n                    );\r\n                    if (error) return <p>Something went wrong...</p>\r\n                    return <SearchRepositoriesList data={data}/>\r\n                }}\r\n            </Query>\r\n        </div>\r\n    )\r\n};\r\nexport default SearchRepositories","import Card from \"@material-ui/core/Card\";\r\nimport '../App.css';\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nconst SearchUsersList = ({data}) => (\r\n    <ul>\r\n        {data.search.edges.map(({node}) => {\r\n            return (\r\n                <li>\r\n                    <div key={node.id}>\r\n                        <Card style={{display: \"flex\",\r\n                            flexWrap: \"nowrap\",\r\n                            }}>\r\n                            <Avatar variant=\"square\"\r\n                                    src={node.avatarUrl}\r\n                                    style={{width: '100px',\r\n                                        height: '100px',\r\n                                        border: \"2px solid white\",}}\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                    <Link to={`/user/${node.id}`}>{node.login}</Link>\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    {node.bio}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </div>\r\n                </li>\r\n            );\r\n        })}\r\n    </ul>\r\n);\r\n\r\nexport default SearchUsersList;","import React, {useState} from \"react\";\r\nimport '../App.css';\r\nimport {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport SearchUsersList from \"./SearchUsersList\";\r\nimport {makeStyles, Paper} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nexport const SEARCH_USER = gql`\r\nquery ($user: String!){\r\n  search(query: $user, type: USER, first: 30) {\r\n    edges{\r\n      node {\r\n      __typename\r\n      ... on User {\r\n            id\r\n            name\r\n            login\r\n            avatarUrl\r\n            url\r\n            bio\r\n          }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: \"center\"\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n    centerRow: {\r\n        padding: theme.spacing(3, 2),\r\n        textAlign: \"center\",\r\n        margin: \"10px\",\r\n    }\r\n}));\r\n\r\n\r\nconst SearchUsers = () => {\r\n    const classes = useStyles();\r\n    const [input, setInput] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <TextField\r\n                    id=\"outlined-search\"\r\n                    name=\"name\"\r\n                    label=\"Search users\"\r\n                    type=\"search\"\r\n                    className={classes.textField}\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={input}\r\n                    onChange={event => {\r\n                        setInput(event.target.value);\r\n                    }}\r\n                />\r\n            </div>\r\n            <Query query={SEARCH_USER} variables={{user: input}}>\r\n                {({loading, error, data}) => {\r\n                    if (loading) return (\r\n                        <div style={{position: 'fixed', top: '50%', left: '50%'}}>\r\n                            <Loader\r\n                                type=\"MutatingDots\"\r\n                                color=\"#00BFFF\"\r\n                                height={100}\r\n                                width={100}\r\n                                timeout={3000} //3 secs\r\n\r\n                            />\r\n                        </div>\r\n                    );\r\n                    if (!data) return (\r\n                        <Paper className={classes.centerRow}>\r\n                            <Typography variant=\"h3\" component=\"h3\" style={{color: \"red\"}}>\r\n                                Your token is not valid. Check please.\r\n                            </Typography>\r\n                        </Paper>\r\n                    );\r\n                    if (error) return <p>Something went wrong...</p>\r\n                    return <SearchUsersList data={data}/>\r\n                }}\r\n            </Query>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchUsers","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport React from \"react\";\r\nimport Repository from \"./Repository/Repository\";\r\nimport Login from \"./Login\";\r\nimport Profile from \"./User/Profile\";\r\nimport SearchRepositories from \"./RepositoryList/SearchRepositories\";\r\nimport RepositoryList from \"./RepositoryList/RepositoryList\";\r\nimport SearchUsers from \"./User/SearchUsers\";\r\nimport User from \"./User/User\";\r\n\r\nconst AppRouter = ({organization}, {search}) => {\r\n    return(\r\n        <div style={style}>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/repositories\">\r\n                        <RepositoryList repositories={search}/>\r\n                    </Route>\r\n                    <Route path=\"/search/repositories\">\r\n                        <SearchRepositories/>\r\n                    </Route>\r\n                    <Route path=\"/search/users\">\r\n                        <SearchUsers/>\r\n                    </Route>\r\n                    <Route path=\"/repository/:login/:name\">\r\n                        <Repository/>\r\n                    </Route>\r\n                    <Route path=\"/user/:id\">\r\n                        <User/>\r\n                    </Route>\r\n                    <Route path=\"/login\">\r\n                        <Login/>\r\n                    </Route>\r\n                    <Route path=\"/profile\">\r\n                        <Profile/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style={\r\n    marginTop:'20px'\r\n}\r\n\r\nexport default AppRouter;","import React from 'react'\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PageviewRoundedIcon from '@material-ui/icons/PageviewRounded';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport {IsTokenValid} from \"./Login\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst style = {\r\n    flexGrow: 1\r\n};\r\n\r\nconst CLIENT_ID = \"a10d0a1cb9442a24b618\";\r\nconst REDIRECT_URI = \"http://localhost:3000\";\r\n\r\nconst NavBar = () => {\r\n    const exit = () => {\r\n        localStorage.clear();\r\n    };\r\n    return (\r\n        <div>\r\n            <AppBar style={{background: '#2e3b55'}} position=\"static\">\r\n                <Toolbar>\r\n                    {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"Menu\">*/}\r\n                    {/*    <MenuIcon/>*/}\r\n                    {/*</IconButton>*/}\r\n                    <Typography variant=\"h6\" style={style}>\r\n                        GitHub client\r\n                    </Typography>\r\n                    {IsTokenValid() ? (\r\n                        <div>\r\n                            <Button href=\"/search/repositories\" color=\"inherit\">\r\n                                <PageviewRoundedIcon/>\r\n                                Search repositories\r\n                            </Button>\r\n                            <Button href=\"/search/users\" color=\"inherit\">\r\n                                <SearchIcon/>\r\n                                Search users\r\n                            </Button>\r\n                            <Button href=\"/profile\" color=\"inherit\">\r\n                                <AccountBoxIcon/>\r\n                                Profile\r\n                            </Button>\r\n                            <Button color='inherit' href=\"/\" onClick={exit}>\r\n                                <ExitToAppIcon/>\r\n                                {/*<i className=\"fas fa-door-open fa-2x\"></i>*/}\r\n                                Exit\r\n                            </Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Button href=\"/login\" color=\"inherit\">\r\n                                <LockOpenIcon/>\r\n                                Login\r\n                            </Button>\r\n                            <Button color=\"inherit\"\r\n                                    href={`https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&scope=user&redirect_uri=${REDIRECT_URI}`}>\r\n                                Oauth\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NavBar","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport './App.css';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\nimport AppRouter from \"./AppRouter\";\r\nimport NavBar from \"./NavBar\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nexport const GET_REPOSITORIES_OF_ORGANIZATION = gql`\r\nquery getOrganization($login: String!){\r\n    organization(login: $login) {\r\n      repositories(first: 20) {\r\n        edges {\r\n          node {\r\n            id\r\n            name\r\n            url\r\n            viewerHasStarred\r\n            stargazers {\r\n                totalCount\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    card: {\r\n        width: 200,\r\n        margin: \"auto\",\r\n        transition: \"0.3s\",\r\n        boxShadow: \"0 8px 40px -12px rgba(0,0,0,0.3)\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0 16px 70px -12.125px rgba(0,0,0,0.3)\"\r\n        },\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: \"row\",\r\n    },\r\n    media: {\r\n        height: 100,\r\n    },\r\n    heading: {\r\n        fontWeight: \"bold\"\r\n    },\r\n    subheading: {\r\n        lineHeight: 1.8\r\n    },\r\n    avatar: {\r\n        display: \"inline-block\",\r\n        border: \"2px solid white\"\r\n    },\r\n\r\n});\r\n\r\n\r\nexport const theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: [\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            '\"Segoe UI\"',\r\n            'Roboto',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            'sans-serif',\r\n            '\"Apple Color Emoji\"',\r\n            '\"Segoe UI Emoji\"',\r\n            '\"Segoe UI Symbol\"',\r\n        ].join(','),\r\n        htmlFontSize: 10\r\n    },\r\n});\r\n\r\n\r\nexport const App = () => {\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            <Container>\r\n                <AppRouter/>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\n\r\nimport App from './Components/App';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: GITHUB_BASE_URL,\r\n  headers: {\r\n    authorization: `Bearer ${\r\n        localStorage.getItem(\"token\")\r\n    }`,\r\n  },\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache,\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}